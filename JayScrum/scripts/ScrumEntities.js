
////////////////////////////////////////////////////////////////////////////////////////
////// Autogenerated by JaySvcUtil.exe http://JayData.org for more info        /////////
//////                             oData v1                                    /////////
////////////////////////////////////////////////////////////////////////////////////////

(function(global, $data, undefined) {

  
  

  function registerEdmTypes() {
  
    function Edm_Boolean() { };
    $data.Container.registerType('Edm.Boolean', Edm_Boolean);
    $data.Container.mapType(Edm_Boolean, $data.Boolean);
    
    function Edm_Binary() { };
    $data.Container.registerType('Edm.Binary', Edm_Binary);
    $data.Container.mapType(Edm_Binary, $data.Blob);
    
    function Edm_DateTime() { };
    $data.Container.registerType('Edm.DateTime', Edm_DateTime);
    $data.Container.mapType(Edm_DateTime, $data.Date);
    
    function Edm_DateTimeOffset() { };
    $data.Container.registerType('Edm.DateTimeOffset', Edm_DateTimeOffset);
    $data.Container.mapType(Edm_DateTimeOffset, $data.Integer);
    
    function Edm_Time() { };
    $data.Container.registerType('Edm.Time', Edm_Time);
    $data.Container.mapType(Edm_Time, $data.Integer);
    
    function Edm_Decimal() { };
    $data.Container.registerType('Edm.Decimal', Edm_Decimal);
    $data.Container.mapType(Edm_Decimal, $data.Number);
    
    function Edm_Single() { };
    $data.Container.registerType('Edm.Single', Edm_Single);
    $data.Container.mapType(Edm_Single, $data.Number);
    
    function Edm_Double() { };
    $data.Container.registerType('Edm.Double', Edm_Double);
    $data.Container.mapType(Edm_Double, $data.Number);
    
    function Edm_Guid() { };
    $data.Container.registerType('Edm.Guid', Edm_Guid);
    $data.Container.mapType(Edm_Guid, $data.String);
    
    function Edm_Int16() { };
    $data.Container.registerType('Edm.Int16', Edm_Int16);
    $data.Container.mapType(Edm_Int16, $data.Integer);
    
    function Edm_Int32() { };
    $data.Container.registerType('Edm.Int32', Edm_Int32);
    $data.Container.mapType(Edm_Int32, $data.Integer);
    
    function Edm_Int64() { };
    $data.Container.registerType('Edm.Int64', Edm_Int64);
    $data.Container.mapType(Edm_Int64, $data.Integer);
    
    function Edm_Byte() { };
    $data.Container.registerType('Edm.Byte', Edm_Byte);
    $data.Container.mapType(Edm_Byte, $data.Integer);
    
    function Edm_String() { };
    $data.Container.registerType('Edm.String', Edm_String);
    $data.Container.mapType(Edm_String, $data.String);
    
  };
  registerEdmTypes();
  $data.Entity.extend('Microsoft.Samples.DPE.ODataTFS.Model.Entities.Build', {
    'Project': { key:true,type:'Edm.String',nullable:false,required:true },
    'Definition': { key:true,type:'Edm.String',nullable:false,required:true },
    'Number': { key:true,type:'Edm.String',nullable:false,required:true },
    'Reason': { type:'Edm.String',nullable:true },
    'Quality': { type:'Edm.String',nullable:true },
    'Status': { type:'Edm.String',nullable:true },
    'RequestedBy': { type:'Edm.String',nullable:true },
    'RequestedFor': { type:'Edm.String',nullable:true },
    'LastChangedBy': { type:'Edm.String',nullable:true },
    'StartTime': { type:'Edm.DateTime',nullable:false,required:true },
    'FinishTime': { type:'Edm.DateTime',nullable:false,required:true },
    'LastChangedOn': { type:'Edm.DateTime',nullable:false,required:true,concurrencyMode:$data.ConcurrencyMode.Fixed },
    'BuildFinished': { type:'Edm.Boolean',nullable:false,required:true },
    'DropLocation': { type:'Edm.String',nullable:true },
    'Errors': { type:'Edm.String',nullable:true },
    'Warnings': { type:'Edm.String',nullable:true },
    'WorkItems': { type:'Array',elementType:'Microsoft.Samples.DPE.ODataTFS.Model.Entities.WorkItem',inverseProperty:'$$unbound' },
    'Changesets': { type:'Array',elementType:'Microsoft.Samples.DPE.ODataTFS.Model.Entities.Changeset',inverseProperty:'$$unbound' }
  });
  $data.Entity.extend('Microsoft.Samples.DPE.ODataTFS.Model.Entities.BuildDefinition', {
    'Project': { key:true,type:'Edm.String',nullable:false,required:true },
    'Definition': { key:true,type:'Edm.String',nullable:false,required:true }
  });
  $data.Entity.extend('Microsoft.Samples.DPE.ODataTFS.Model.Entities.Changeset', {
    'Id': { key:true,type:'Edm.Int32',nullable:false,required:true },
    'ArtifactUri': { type:'Edm.String',nullable:true },
    'Comment': { type:'Edm.String',nullable:true },
    'Committer': { type:'Edm.String',nullable:true },
    'CreationDate': { type:'Edm.DateTime',nullable:false,required:true,concurrencyMode:$data.ConcurrencyMode.Fixed },
    'Owner': { type:'Edm.String',nullable:true },
    'Branch': { type:'Edm.String',nullable:true },
    'WebEditorUrl': { type:'Edm.String',nullable:true },
    'Changes': { type:'Array',elementType:'Microsoft.Samples.DPE.ODataTFS.Model.Entities.Change',inverseProperty:'$$unbound' },
    'WorkItems': { type:'Array',elementType:'Microsoft.Samples.DPE.ODataTFS.Model.Entities.WorkItem',inverseProperty:'$$unbound' }
  });
  $data.Entity.extend('Microsoft.Samples.DPE.ODataTFS.Model.Entities.Project', {
    'Name': { key:true,type:'Edm.String',nullable:false,required:true },
    'Collection': { type:'Edm.String',nullable:true },
    'Changesets': { type:'Array',elementType:'Microsoft.Samples.DPE.ODataTFS.Model.Entities.Changeset',inverseProperty:'$$unbound' },
    'Builds': { type:'Array',elementType:'Microsoft.Samples.DPE.ODataTFS.Model.Entities.Build',inverseProperty:'$$unbound' },
    'BuildDefinitions': { type:'Array',elementType:'Microsoft.Samples.DPE.ODataTFS.Model.Entities.BuildDefinition',inverseProperty:'$$unbound' },
    'WorkItems': { type:'Array',elementType:'Microsoft.Samples.DPE.ODataTFS.Model.Entities.WorkItem',inverseProperty:'$$unbound' },
    'Queries': { type:'Array',elementType:'Microsoft.Samples.DPE.ODataTFS.Model.Entities.Query',inverseProperty:'$$unbound' },
    'Branches': { type:'Array',elementType:'Microsoft.Samples.DPE.ODataTFS.Model.Entities.Branch',inverseProperty:'$$unbound' },
    'AreaPaths': { type:'Array',elementType:'Microsoft.Samples.DPE.ODataTFS.Model.Entities.AreaPath',inverseProperty:'$$unbound' }
  });
  $data.Entity.extend('Microsoft.Samples.DPE.ODataTFS.Model.Entities.WorkItem', {
    'Id': { key:true,type:'Edm.Int32',nullable:false,required:true },
    'AreaPath': { type:'Edm.String',nullable:true },
    'IterationPath': { type:'Edm.String',nullable:true },
    'Revision': { type:'Edm.Int32',nullable:false,required:true },
    'Priority': { type:'Edm.String',nullable:true },
    'Severity': { type:'Edm.String',nullable:true },
    'StackRank': { type:'Edm.String',nullable:true },
    'Project': { type:'Edm.String',nullable:true },
    'AssignedTo': { type:'Edm.String',nullable:true },
    'CreatedDate': { type:'Edm.DateTime',nullable:false,required:true },
    'CreatedBy': { type:'Edm.String',nullable:true },
    'ChangedDate': { type:'Edm.DateTime',nullable:false,required:true,concurrencyMode:$data.ConcurrencyMode.Fixed },
    'ChangedBy': { type:'Edm.String',nullable:true },
    'ResolvedBy': { type:'Edm.String',nullable:true },
    'Title': { type:'Edm.String',nullable:true },
    'State': { type:'Edm.String',nullable:true },
    'Type': { type:'Edm.String',nullable:true },
    'Reason': { type:'Edm.String',nullable:true },
    'Description': { type:'Edm.String',nullable:true },
    'ReproSteps': { type:'Edm.String',nullable:true },
    'FoundInBuild': { type:'Edm.String',nullable:true },
    'IntegratedInBuild': { type:'Edm.String',nullable:true },
    'WebEditorUrl': { type:'Edm.String',nullable:true },
    'StartDate': { type:'Edm.DateTime',nullable:false,required:true },
    'FinishDate': { type:'Edm.DateTime',nullable:false,required:true },
    'BacklogPriority': { type:'Edm.Double',nullable:true },
    'Effort': { type:'Edm.Int32',nullable:true },
    'BusinessValue': { type:'Edm.Int32',nullable:true },
    'RemainingWork': { type:'Edm.Int32',nullable:true },
    'ChildCount': { type:'Edm.Int32',nullable:false,required:true },
    'ParentName': { type:'Edm.String',nullable:true },
    'SprintAllTaskCount': { type:'Edm.Int32',nullable:false,required:true },
    'SprintToDoTaskCount': { type:'Edm.Int32',nullable:false,required:true },
    'SprintInProgTaskCount': { type:'Edm.Int32',nullable:false,required:true },
    'SprintInProgTaskRemainingWork': { type:'Edm.Int32',nullable:false,required:true },
    'SprintDoneTaskCount': { type:'Edm.Int32',nullable:false,required:true },
    'SprintDaysLeft': { type:'Edm.Int32',nullable:false,required:true },
    'BackLogItemCountInProject': { type:'Edm.Int32',nullable:false,required:true },
    'BackLogItemCountInSprint': { type:'Edm.Int32',nullable:false,required:true },
    'SprintBurndownData': { type:'Edm.String',nullable:true },
    'IsBlocked': { type:'Edm.String',nullable:true },
    'Attachments': { type:'Array',elementType:'Microsoft.Samples.DPE.ODataTFS.Model.Entities.Attachment',inverseProperty:'$$unbound' }
  },{
    instancePropertyChanged: { value: new $data.Event("InstancePropertyChanged") }
  });
  $data.Entity.extend('Microsoft.Samples.DPE.ODataTFS.Model.Entities.Attachment', {
    'Id': { key:true,type:'Edm.String',nullable:false,required:true },
    'WorkItemId': { type:'Edm.Int32',nullable:false,required:true },
    'Index': { type:'Edm.Int32',nullable:false,required:true },
    'AttachedTime': { type:'Edm.DateTime',nullable:false,required:true,concurrencyMode:$data.ConcurrencyMode.Fixed },
    'CreationTime': { type:'Edm.DateTime',nullable:false,required:true },
    'LastWriteTime': { type:'Edm.DateTime',nullable:false,required:true },
    'Name': { type:'Edm.String',nullable:true },
    'Extension': { type:'Edm.String',nullable:true },
    'Comment': { type:'Edm.String',nullable:true },
    'Length': { type:'Edm.Int64',nullable:false,required:true },
    'Uri': { type:'Edm.String',nullable:true }
  });
  $data.Entity.extend('Microsoft.Samples.DPE.ODataTFS.Model.Entities.Change', {
    'Collection': { type:'Edm.String',nullable:true },
    'Changeset': { key:true,type:'Edm.Int32',nullable:false,required:true },
    'ChangeType': { type:'Edm.String',nullable:true },
    'Path': { key:true,type:'Edm.String',nullable:false,required:true },
    'Type': { type:'Edm.String',nullable:true }
  });
  $data.Entity.extend('Microsoft.Samples.DPE.ODataTFS.Model.Entities.Query', {
    'Id': { key:true,type:'Edm.String',nullable:false,required:true },
    'Name': { type:'Edm.String',nullable:true },
    'Description': { type:'Edm.String',nullable:true },
    'QueryText': { type:'Edm.String',nullable:true },
    'Path': { type:'Edm.String',nullable:true },
    'WorkItems': { type:'Array',elementType:'Microsoft.Samples.DPE.ODataTFS.Model.Entities.WorkItem',inverseProperty:'$$unbound' },
    'Project': { type:'Edm.String',nullable:true },
    'QueryType': { type:'Edm.String',nullable:true }
  });
  $data.Entity.extend('Microsoft.Samples.DPE.ODataTFS.Model.Entities.Branch', {
    'Path': { key:true,type:'Edm.String',nullable:false,required:true },
    'Description': { type:'Edm.String',nullable:true },
    'DateCreated': { type:'Edm.DateTime',nullable:false,required:true,concurrencyMode:$data.ConcurrencyMode.Fixed },
    'Changesets': { type:'Array',elementType:'Microsoft.Samples.DPE.ODataTFS.Model.Entities.Changeset',inverseProperty:'$$unbound' }
  });
  $data.Entity.extend('Microsoft.Samples.DPE.ODataTFS.Model.Entities.AreaPath', {
    'Path': { key:true,type:'Edm.String',nullable:false,required:true },
    'Name': { type:'Edm.String',nullable:true,concurrencyMode:$data.ConcurrencyMode.Fixed },
    'SubAreas': { type:'Array',elementType:'Microsoft.Samples.DPE.ODataTFS.Model.Entities.AreaPath',inverseProperty:'$$unbound' }
  });
  $data.EntityContext.extend('Microsoft.Samples.DPE.ODataTFS.Model.TFSData', {
    Builds: { type: $data.EntitySet, elementType: Microsoft.Samples.DPE.ODataTFS.Model.Entities.Build },
      BuildDefinitions: { type: $data.EntitySet, elementType: Microsoft.Samples.DPE.ODataTFS.Model.Entities.BuildDefinition },
      Changesets: { type: $data.EntitySet, elementType: Microsoft.Samples.DPE.ODataTFS.Model.Entities.Changeset },
      Projects: { type: $data.EntitySet, elementType: Microsoft.Samples.DPE.ODataTFS.Model.Entities.Project },
      WorkItems: { type: $data.EntitySet, elementType: Microsoft.Samples.DPE.ODataTFS.Model.Entities.WorkItem },
      Attachments: { type: $data.EntitySet, elementType: Microsoft.Samples.DPE.ODataTFS.Model.Entities.Attachment },
      Changes: { type: $data.EntitySet, elementType: Microsoft.Samples.DPE.ODataTFS.Model.Entities.Change },
      Queries: { type: $data.EntitySet, elementType: Microsoft.Samples.DPE.ODataTFS.Model.Entities.Query },
      Branches: { type: $data.EntitySet, elementType: Microsoft.Samples.DPE.ODataTFS.Model.Entities.Branch },
      AreaPaths: { type: $data.EntitySet, elementType: Microsoft.Samples.DPE.ODataTFS.Model.Entities.AreaPath },
      TriggerBuild: $data.EntityContext.generateServiceOperation({ serviceName:'TriggerBuild', returnType: null, params: [], method: 'POST'})
  });
  
Microsoft.Samples.DPE.ODataTFS.Model.context = new Microsoft.Samples.DPE.ODataTFS.Model.TFSData( { name:'oData', oDataServiceHost: 'http://localhost/ODataTFS.Web/DefaultCollection' });

      
  })(window, $data);
      
    